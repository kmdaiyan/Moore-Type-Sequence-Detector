// Code your design here
// Code your design here
module sd_moore(clk,reset,w,z); //cosecutive 11
  
  input clk,reset,w;
  output reg z;	
		parameter A=  3'b000; //states
		parameter B=  3'b001;
		parameter C=  3'b010;
        parameter D=  3'b011;
        parameter E=  3'b100;
        parameter F=  3'b101;
        parameter G=  3'b110;
        	  
   reg [2:0]current_state;
   reg [2:0]next_state;	
  
  always@(negedge reset or posedge clk) // reset
            begin
              if(reset==1)
              current_state<=A;
              else
                current_state<=next_state;
            end
		
  always@(w or current_state)  //state change
			
              case(current_state)
           
                  A: if(w==0)
                      begin
                        next_state<=B;
                      end
                      else
                        begin
                         next_state<=E;
                        end
                  B: if(w==0)
                      begin
                        next_state<=C;
                      end
                      else
                        begin
                          next_state<=E;
                        end
                  C:if(w==0)
                      begin
                        next_state<=D;
                      end
                      else
                        begin
                          next_state<=E;
                        end
                 D:if(w==0)
                      begin
                        next_state<=D;
                      end
                      else
                        begin
                          next_state<=E;
                        end
                E:if(w==0)
                      begin
                        next_state<=B;
                      end
                      else
                        begin
                          next_state<=F;
                        end
                F:if(w==0)
                      begin
                        next_state<=B;
                      end
                      else
                        begin
                          next_state<=G;
                        end
                G:if(w==0)
                      begin
                        next_state<=B;
                      end
                      else
                        begin
                          next_state<=G;
                        end
                
                  endcase
     
          
  always@(current_state) //output
    begin
      case(current_state)
        A: z<=0;
        B: z<=0;
        C: z<=0;
        D: z<=1;
        E: z<=0;
        F: z<=0;
        G: z<=1;
        
      endcase
    end
         endmodule
                 